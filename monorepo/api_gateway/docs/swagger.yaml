basePath: /api
definitions:
  entity.Movie:
    properties:
      description:
        type: string
      director:
        type: string
      id:
        type: string
      plot:
        type: string
      title:
        type: string
      year:
        type: integer
    type: object
  entity.MovieList:
    properties:
      count:
        type: integer
      movies:
        items:
          $ref: '#/definitions/entity.Movie'
        type: array
    type: object
  utils.Response:
    properties:
      data: {}
      error:
        type: boolean
      message: {}
      path:
        type: string
      status:
        type: integer
      timestamp:
        type: string
    type: object
  utils.ResponseForExec:
    properties:
      id:
        type: string
      info:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the API documentation for the Movie Service.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Movie API
  version: "1.0"
paths:
  /v1/movie:
    put:
      consumes:
      - application/json
      description: Update movie
      parameters:
      - description: Movie
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/entity.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: 'OK"  example:{"data": {"info": "Movie updated successfully",
            "id": "123e4567-e89b-12d3-a456-426614174000"}}'
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/utils.ResponseForExec'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update movie
      tags:
      - movie
  /v1/movie/{id}:
    delete:
      consumes:
      - application/json
      description: Delete movie
      parameters:
      - description: Movie ID
        example: 123e4567-e89b-12d3-a456-426614174000
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'OK"  example:{"data": {"info": "Movie deleted successfully",
            "id": "123e4567-e89b-12d3-a456-426614174000"}}'
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/utils.ResponseForExec'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete movie
      tags:
      - movie
    get:
      consumes:
      - application/json
      description: Get movie by id
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'OK"  example:{"data": {"id": "123e4567-e89b-12d3-a456-426614174000",
            "title": "Inception", "description": "A mind-bending thriller", "year":
            2010, "plot": "A thief who steals corporate secrets through the use of
            dream-sharing technology is given the inverse task of planting an idea
            into the mind of a CEO.", "director": "Christopher Nolan"}}sk of planting
            an idea into the mind of a CEO.", "director": "Christopher Nolan"}'
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.Movie'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get movie by id
      tags:
      - movie
  /v1/movies:
    get:
      consumes:
      - application/json
      description: Get movies
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'OK"  example:{"data": {"movies": [{"id": "123e4567-e89b-12d3-a456-426614174000",
            "title": "Inception", "description": "A mind-bending thriller", "year":
            2010, "plot": "A thief who steals corporate secrets through the use of
            dream-sharing technology is given the inverse task of planting an idea
            into the mind of a CEO.", "director": "Christopher Nolan"}], "count":
            1}}'
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/entity.MovieList'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get movies
      tags:
      - movie
  /v1/new/movie:
    post:
      consumes:
      - application/json
      description: Create movie
      parameters:
      - description: Movie
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/entity.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: 'OK"  example:{"data": {"info": "Movie created successfully",
            "id": "123e4567-e89b-12d3-a456-426614174000"}}'
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/utils.ResponseForExec'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create movie
      tags:
      - movie
swagger: "2.0"
